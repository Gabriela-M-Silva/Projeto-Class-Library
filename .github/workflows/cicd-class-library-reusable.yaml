name: CI-CD Class Library Reusable Workflow

on:
  workflow_call:
    inputs:
      test-directory:
        required: true
        type: string
      lib-directory:
        required: true
        type: string

jobs:
  build-and-test:
    runs-on: windows-latest
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup MSBuild
      - name: Setup MSBuild path
        uses: microsoft/setup-msbuild@v2

      # Restore NuGet packages
      - name: Restore NuGet packages
        run: nuget restore
        working-directory: ${{ inputs.lib-directory }}

      # Build the Class Library
      - name: Build class library
        run: msbuild /p:Configuration=Release
        working-directory: ${{ inputs.lib-directory }}
  
      # Build test project(s)
      - name: Build test project
        run: msbuild /p:Configuration=Release
        working-directory: ${{ inputs.test-directory }}

      # Setup VSTest
      - name: Setup VSTest
        uses: darenm/Setup-VSTest@v1

      # Run tests
      - name: Run tests
        run: |
          vstest.console.exe **/*Test*.dll --logger:trx
        working-directory: ${{ inputs.test-directory }}

      # Sonar
      - name: Sonarqube Scanner
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=${{ vars.ORGANIZATION_SONAR }}
            -Dsonar.projectKey=${{ github.event.repository.name }}
            -Dsonar.verbose=true
            -Dsonar.exclusions=**/bin/**/*,**/obj/**/*,**/packages/**/*

      # Download nuget.exe
      - name: Download nuget.exe
        run: |
          curl -o nuget.exe https://dist.nuget.org/win-x86-commandline/latest/nuget.exe

      - name: Find .csproj path
        id: find-csproj
        run: |
          echo "csproj_path=$(find '${{ inputs.lib-directory }}' -name '*.csproj')" >> $GITHUB_OUTPUT
        shell: bash

      # Pack the NuGet package
      - name: Pack NuGet package
        run: ./nuget.exe pack ${{ steps.find-csproj.outputs.csproj_path }} -Properties Configuration=Release -OutputDirectory ./nupkg -Build
        shell: pwsh

      # Authenticate and Publish to GitHub Packages
      - name: Authenticate and Publish to GitHub Packages
        run: |
          nuget.exe sources add -Name "github" -Source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" -Username ${{ github.actor }} -Password ${{ secrets.GITHUB_TOKEN }}
          nuget.exe push **/*.nupkg -Source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" -ApiKey ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}